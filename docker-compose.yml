# Usage
#   Start:          docker-compose up
#   With helpers:   docker-compose -f docker-compose.yml -f ./dev/docker-compose.dev.yml up
#   Stop:           docker-compose down
#   Destroy:        docker-compose -f docker-compose.yml -f ./dev/docker-compose.dev.yml down -v --remove-orphans

version: "3.8"

services:
  studio:
    container_name: supabase-studio
    image: supabase/studio:latest
    restart: unless-stopped
    depends_on:
      - meta
    ports:
      - ${STUDIO_PORT}:3000/tcp
    environment:
      SUPABASE_URL: ${KONG_URL}
      STUDIO_PG_META_URL: ${META_URL}
      SUPABASE_ANON_KEY: ${ANON_KEY}
      SUPABASE_SERVICE_KEY: ${SERVICE_ROLE_KEY}

  kong:
    container_name: supabase-kong
    image: kong:2.1
    restart: unless-stopped
    ports:
      - ${KONG_HTTP_PORT}:8000/tcp
      - ${KONG_HTTPS_PORT}:8443/tcp
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /var/lib/kong/kong.yml
      # https://github.com/supabase/cli/issues/14
      KONG_DNS_ORDER: LAST,A,CNAME
      KONG_PLUGINS: request-transformer,cors,key-auth,acl
    volumes:
      - ./data_layer/supabase/kong.yml:/var/lib/kong/kong.yml

  auth:
    container_name: supabase-auth
    image: supabase/gotrue:v2.2.12
    depends_on:
      - db
    restart: unless-stopped
    environment:
      GOTRUE_API_HOST: 0.0.0.0
      GOTRUE_API_PORT: 9999

      GOTRUE_DB_DRIVER: postgres
      GOTRUE_DB_DATABASE_URL: postgres://postgres:${POSTGRES_PASSWORD}@db:5432/postgres?search_path=auth

      GOTRUE_SITE_URL: ${SITE_URL}
      GOTRUE_URI_ALLOW_LIST: ${ADDITIONAL_REDIRECT_URLS}
      GOTRUE_DISABLE_SIGNUP: ${DISABLE_SIGNUP}

      GOTRUE_JWT_SECRET: ${JWT_SECRET}
      GOTRUE_JWT_EXP: ${JWT_EXPIRY}
      GOTRUE_JWT_DEFAULT_GROUP_NAME: authenticated

      GOTRUE_EXTERNAL_EMAIL_ENABLED: ${ENABLE_EMAIL_SIGNUP}
      GOTRUE_MAILER_AUTOCONFIRM: ${ENABLE_EMAIL_AUTOCONFIRM}
      GOTRUE_SMTP_ADMIN_EMAIL: ${SMTP_ADMIN_EMAIL}
      GOTRUE_SMTP_HOST: ${SMTP_HOST}
      GOTRUE_SMTP_PORT: ${SMTP_PORT}
      GOTRUE_SMTP_USER: ${SMTP_USER}
      GOTRUE_SMTP_PASS: ${SMTP_PASS}
      GOTRUE_SMTP_SENDER_NAME: ${SMTP_SENDER_NAME}
      GOTRUE_MAILER_URLPATHS_INVITE: /auth/v1/verify
      GOTRUE_MAILER_URLPATHS_CONFIRMATION: /auth/v1/verify
      GOTRUE_MAILER_URLPATHS_RECOVERY: /auth/v1/verify
      GOTRUE_MAILER_URLPATHS_EMAIL_CHANGE: /auth/v1/verify

      GOTRUE_EXTERNAL_PHONE_ENABLED: ${ENABLE_PHONE_SIGNUP}
      GOTRUE_SMS_AUTOCONFIRM: ${ENABLE_PHONE_AUTOCONFIRM}

  realtime:
    container_name: supabase-realtime
    image: supabase/realtime:v0.21.0
    depends_on:
      - db
    restart: unless-stopped
    environment:
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: postgres
      DB_USER: postgres
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_SSL: "false"
      PORT: 4000
      JWT_SECRET: ${JWT_SECRET}
      REPLICATION_MODE: RLS
      REPLICATION_POLL_INTERVAL: 100
      SECURE_CHANNELS: "true"
      SLOT_NAME: supabase_realtime_rls
      TEMPORARY_SLOT: "true"
    command: >
      bash -c "./prod/rel/realtime/bin/realtime eval Realtime.Release.migrate
      && ./prod/rel/realtime/bin/realtime start"

  storage:
    container_name: supabase-storage
    image: supabase/storage-api:v0.10.0
    depends_on:
      - db
    restart: unless-stopped
    environment:
      ANON_KEY: ${ANON_KEY}
      SERVICE_KEY: ${SERVICE_ROLE_KEY}
      POSTGREST_URL: http://rest:3000
      PGRST_JWT_SECRET: ${JWT_SECRET}
      DATABASE_URL: postgres://postgres:${POSTGRES_PASSWORD}@db:5432/postgres
      PGOPTIONS: -c search_path=storage,public
      FILE_SIZE_LIMIT: 52428800
      STORAGE_BACKEND: file
      FILE_STORAGE_BACKEND_PATH: /var/lib/storage
      TENANT_ID: stub
      # TODO: https://github.com/supabase/storage-api/issues/55
      REGION: stub
      GLOBAL_S3_BUCKET: stub
      # We don't persist storage for development since we use macOS.
      # https://github.com/supabase/supabase/issues/3902
      #    volumes:
      #      - ./volumes/storage:/var/lib/storage

  meta:
    container_name: supabase-meta
    image: supabase/postgres-meta:v0.29.0
    depends_on:
      - db
    restart: unless-stopped
    environment:
      PG_META_PORT: 8080
      PG_META_DB_HOST: db
      PG_META_DB_PASSWORD: ${POSTGRES_PASSWORD}

  db:
    container_name: supabase-db
    image: supabase/postgres:14.1.0
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    restart: unless-stopped
    ports:
      - ${POSTGRES_PORT}:5432
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./data_layer/supabase/init:/docker-entrypoint-initdb.d


  # When this service is healthy, supabase has been loaded.
  supabase_loaded:
    container_name: tet-datalayer-loaded
    image: postgres:14 # use postgres solely for its plsql client.
    healthcheck:
      test: sh /scripts/loaded_supabase.sh
      interval: 10s
      timeout: 5s
      retries: 100
    depends_on:
      - db
      - auth
      - storage
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGPASSWORD: ${POSTGRES_PASSWORD}
      PGUSER: postgres
      PGHOST: db
    volumes:
      - ./data_layer/scripts/loaded_supabase.sh:/scripts/loaded_supabase.sh
      - ./data_layer/postgres:/postgres

  # Sqitch
  sqitch:
    container_name: tet-sqitch-deploy
    image: sqitch/sqitch
    depends_on:
      supabase_loaded:
        condition: service_healthy
    environment:
      SQITCH_TARGET: db:pg://db/postgres
      SQITCH_PASSWORD: ${POSTGRES_PASSWORD}
      SQITCH_USERNAME: postgres
    command: deploy
    working_dir: /data_layer/sqitch
    volumes:
      - ./data_layer/sqitch:/data_layer/sqitch

  # Load contents and fakes once db is ready.
  loader:
    container_name: tet-datalayer-loader
    image: postgres:14 # use postgres solely for its plsql client.
    healthcheck:
      test: sh /scripts/loaded_content.sh
      interval: 30s
      timeout: 5s
      retries: 100
    depends_on:
      - sqitch
    command: sh /scripts/try_load.sh
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGPASSWORD: ${POSTGRES_PASSWORD}
      PGUSER: postgres
      PGHOST: db
    volumes:
      - ./data_layer/postgres:/postgres
      - ./data_layer/scripts/try_load.sh:/scripts/try_load.sh
      - ./data_layer/scripts/loaded_content.sh:/scripts/loaded_content.sh

  datalayer-test:
    container_name: tet-datalayer-test
    build: ./data_layer/test_docker/.
    depends_on:
      loader:
        condition: service_healthy
    profiles:
      - donotstart
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGPASSWORD: ${POSTGRES_PASSWORD}
      PGUSER: postgres
      PGHOST: db
    command: >
      bash -c "pg_prove --dbname postgres --port 5432 tests/*.sql"
    volumes:
      - ./data_layer/tests:/tests

  datalayer-api-test:
    container_name: tet-datalayer-api-test
    image: j4yf7o/restcli-node
    depends_on:
      - kong
      - rest
    profiles:
      - donotstart
    command: rest-cli requests/*.http -e docker
    volumes:
      - ./data_layer/requests:/requests
      - ./data_layer/requests/http-client.env.json:/http-client.env.json

  rest:
    container_name: supabase-rest
    image: postgrest/postgrest:v9.0.0
    depends_on:
      loader:
        condition: service_healthy
    restart: unless-stopped
    environment:
      PGRST_DB_URI: postgres://postgres:${POSTGRES_PASSWORD}@db:5432/postgres
      PGRST_DB_SCHEMAS: public,storage
      PGRST_DB_ANON_ROLE: anon
      PGRST_JWT_SECRET: ${JWT_SECRET}
      PGRST_DB_USE_LEGACY_GUCS: "false"

  business:
    container_name: tet-business
    build: ./business/.
    depends_on:
      - kong
      - rest
      - realtime
    restart: unless-stopped
    command: >
      bash -c "pipenv run python -u business/evaluation/entrypoints/start_realtime.py"
    environment:
      SUPABASE_URL: ${SUPABASE_URL}
      SUPABASE_WS: ${SUPABASE_WS}
      REPOSITORIES: SUPABASE

  business-update-content:
    container_name: tet-business-update-content
    build: ./business/.
    profiles:
      - donotstart
    depends_on:
      - kong
      - rest
    restart: unless-stopped
    command: >
      bash -c "pipenv run python business/referentiel/entrypoints/cli.py update-referentiels --referentiel eci
      && pipenv run python business/referentiel/entrypoints/cli.py update-referentiels --referentiel cae
      && pipenv run python business/referentiel/entrypoints/cli.py update-referentiels --referentiel crte
      && pipenv run python business/referentiel/entrypoints/cli.py update-questions-and-personnalisations"
    environment:
      SUPABASE_URL: ${SUPABASE_URL}
      SUPABASE_WS: ${SUPABASE_WS}
      REPOSITORIES: SUPABASE
      REFERENTIELS_REPOSITORY: SUPABASE
    volumes:
      - ./markdown:/markdown

  business-test:
    container_name: tet-business-test
    build: ./business/.
    profiles:
      - donotstart
    depends_on:
      - kong
      - rest
      - realtime
    command: >
      bash -c "pipenv run pytest tests"
    environment:
      SUPABASE_URL: ${SUPABASE_URL}
      SUPABASE_WS: ${SUPABASE_WS}
      REPOSITORIES: SUPABASE

  client:
    container_name: tet-client
    build: ./app.territoiresentransitions.react/.
    depends_on:
      - kong
      - auth
      - rest
      - realtime
      - business
    ports:
      - ${CLIENT_PORT}:3000
    command: >
      bash -c "npm run build && npm run start"
    environment:
      REACT_APP_SUPABASE_KEY: ${ANON_KEY}
      REACT_APP_SUPABASE_URL: http://localhost:8000

  client-test:
    container_name: tet-client-test
    build: ./app.territoiresentransitions.react/.
    profiles:
      - donotstart
    depends_on:
      - kong
      - auth
      - rest
      - realtime
      - business
    ports:
      - ${CLIENT_PORT}:3000
    command: >
      bash -c "npm run test"
    environment:
      REACT_APP_SUPABASE_KEY: ${ANON_KEY}
      REACT_APP_SUPABASE_URL: http://kong:8000
      LANG: fr_FR.UTF-8
      CI: "true"

  # Sqitch revert
  sqitch_revert:
    container_name: tet-sqitch-revert
    image: sqitch/sqitch
    depends_on:
      loader:
        condition: service_healthy
    profiles:
      - donotstart
    environment:
      SQITCH_TARGET: db:pg://db/postgres
      SQITCH_PASSWORD: ${POSTGRES_PASSWORD}
      SQITCH_USERNAME: postgres
    command: revert --to @v1.5.0 --y
    working_dir: /data_layer/sqitch
    volumes:
      - ./data_layer/sqitch:/data_layer/sqitch
